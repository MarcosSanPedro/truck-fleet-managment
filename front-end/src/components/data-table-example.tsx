"use client";

import * as React from "react";
import { DataTable } from "./data-table";
import { DataTableConstructor, type DataTableConfig } from "@/lib/data-constructor/constructor";
import type {GenericColumn } from "./data-table-types";

// Example data type
interface ExampleData {
  id: number;
  name: string;
  email: string;
  phone: string;
  age: number;
  isActive: boolean;
  createdAt: string;
  department: string;
}

// Example data
const exampleData: ExampleData[] = [
  {
    id: 1,
    name: "John Doe",
    email: "john.doe@example.com",
    phone: "(555) 123-4567",
    age: 30,
    isActive: true,
    createdAt: "2024-01-15",
    department: "Engineering"
  },
  {
    id: 2,
    name: "Jane Smith",
    email: "jane.smith@example.com",
    phone: "(555) 987-6543",
    age: 28,
    isActive: false,
    createdAt: "2024-01-20",
    department: "Marketing"
  },
  {
    id: 3,
    name: "Bob Johnson",
    email: "bob.johnson@example.com",
    phone: "(555) 456-7890",
    age: 35,
    isActive: true,
    createdAt: "2024-01-25",
    department: "Sales"
  }
];

/**
 * Example component showing how to use the constructor with auto-generated columns
 */
export function DataTableWithConstructor() {
  const [error, setError] = React.useState<string | null>(null);
  const [columns, setColumns] = React.useState<GenericColumn<ExampleData>[]>([]);

  // Create constructor instance with error handling
  const constructor = React.useMemo(() => {
    try {
      const config: DataTableConfig = {
        autoDetectTypes: true,
        enableRowSelection: true,
        enableGlobalSearch: true,
        enableExport: true,
        columns: {
          // Override specific column configurations
          email: {
            label: "Email Address",
            filterConfig: {
              getUniques: true,
              enabled: true
            }
          },
          phone: {
            label: "Phone Number",
            sortable: false, // Phone numbers shouldn't be sorted
            filterConfig: {
              getUniques: true,
              enabled: true
            }
          },
          isActive: {
            label: "Status",
            filterConfig: {
              getUniques: true,
              enabled: true
            }
          }
        }
      };
      
      return new DataTableConstructor(exampleData, config);
    } catch (err) {
      console.error("Error creating constructor:", err);
      setError(err instanceof Error ? err.message : "Unknown error");
      return null;
    }
  }, []);

  // Auto-generate columns from constructor
  React.useEffect(() => {
    if (constructor) {
      try {
        const autoGeneratedColumns = constructor.getDataTableColumns().map((col) => ({
          key: col.key,
          label: col.label,
          dataType: col.dataType as any,
          enableSorting: col.sortable,
          enableFiltering: col.filterable,
          enableHiding: true,
          minWidth: col.minWidth,
          sticky: col.sticky,
          render: col.render,
          constructorConfig: constructor.getColumnConfig(col.key),
        }));
        setColumns(autoGeneratedColumns);
      } catch (err) {
        console.error("Error generating columns:", err);
        setError(err instanceof Error ? err.message : "Error generating columns");
      }
    }
  }, [constructor]);

  if (error) {
    return (
      <div className="p-6">
        <div className="border border-red-300 bg-red-50 rounded-lg p-4">
          <h3 className="text-red-800 font-semibold">Error:</h3>
          <p className="text-red-600">{error}</p>
        </div>
      </div>
    );
  }

  if (columns.length === 0) {
    return (
      <div className="p-6">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading columns...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-4">Data Table with Constructor Example</h2>
      <p className="text-muted-foreground mb-6">
        This example shows how the constructor automatically detects data types and generates column configurations.
      </p>
      
      <DataTable
        data={exampleData}
        columns={columns}
        dataConstructorConfig={constructor?.config || {}}
        enableRowSelection={true}
        enableGlobalSearch={true}
        enableExport={true}
        addRowAction={{
          label: "Add Employee",
          onClick: () => console.log("Add employee clicked")
        }}
        onEdit={(row) => console.log("Edit row:", row)}
        onDelete={(row) => console.log("Delete row:", row)}
      />
    </div>
  );
}

/**
 * Example component showing manual column definition with constructor integration
 */
export function DataTableWithManualColumns() {
  // Manual column definitions
  const columns: GenericColumn<ExampleData>[] = [
    {
      key: "name",
      label: "Full Name",
      dataType: "string",
      enableSorting: true,
      enableFiltering: true,
    },
    {
      key: "email",
      label: "Email Address",
      dataType: "email",
      enableSorting: true,
      enableFiltering: true,
      render: (value) => (
        <a href={`mailto:${value}`} className="text-blue-600 hover:underline">
          {value}
        </a>
      ),
    },
    {
      key: "phone",
      label: "Phone Number",
      dataType: "phone",
      enableSorting: false,
      enableFiltering: true,
      render: (value) => (
        <a href={`tel:${value}`} className="text-blue-600 hover:underline">
          {value}
        </a>
      ),
    },
    {
      key: "age",
      label: "Age",
      dataType: "number",
      enableSorting: true,
      enableFiltering: true,
    },
    {
      key: "isActive",
      label: "Status",
      dataType: "boolean",
      enableSorting: true,
      enableFiltering: true,
    },
    {
      key: "createdAt",
      label: "Created Date",
      dataType: "date",
      enableSorting: true,
      enableFiltering: true,
    },
    {
      key: "department",
      label: "Department",
      dataType: "string",
      enableSorting: true,
      enableFiltering: true,
    },
  ];

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-4">Data Table with Manual Columns</h2>
      <p className="text-muted-foreground mb-6">
        This example shows manual column definitions with custom render functions.
      </p>
      
      <DataTable
        data={exampleData}
        columns={columns}
        enableRowSelection={true}
        enableGlobalSearch={true}
        enableExport={true}
        addRowAction={{
          label: "Add Employee",
          onClick: () => console.log("Add employee clicked")
        }}
        onEdit={(row) => console.log("Edit row:", row)}
        onDelete={(row) => console.log("Delete row:", row)}
      />
    </div>
  );
}

/**
 * Example showing constructor analysis
 */
export function ConstructorAnalysis() {
  const [constructor, setConstructor] = React.useState<DataTableConstructor<ExampleData> | null>(null);
  const [error, setError] = React.useState<string | null>(null);

  React.useEffect(() => {
    try {
      const constructorInstance = new DataTableConstructor(exampleData, {});
      setConstructor(constructorInstance);
    } catch (err) {
      console.error("Error creating constructor:", err);
      setError(err instanceof Error ? err.message : "Unknown error");
    }
  }, []);

  if (error) {
    return (
      <div className="p-6">
        <div className="border border-red-300 bg-red-50 rounded-lg p-4">
          <h3 className="text-red-800 font-semibold">Error:</h3>
          <p className="text-red-600">{error}</p>
        </div>
      </div>
    );
  }

  if (!constructor) {
    return (
      <div className="p-6">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading constructor analysis...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-4">Constructor Analysis</h2>
      <p className="text-muted-foreground mb-6">
        This shows what the constructor detected from the data.
      </p>
      
      <div className="grid gap-4">
        {constructor.detectedColumns.map((column) => (
          <div key={column.key as string} className="border rounded-lg p-4">
            <h3 className="font-semibold">{column.label}</h3>
            <div className="grid grid-cols-2 gap-2 text-sm text-muted-foreground">
              <div>Key: {column.key as string}</div>
              <div>Type: {column.dataType}</div>
              <div>Unique Values: {column.uniqueValues}</div>
              <div>Sortable: {column.isSortable ? "Yes" : "No"}</div>
              <div>Filterable: {column.isFilterable ? "Yes" : "No"}</div>
              <div>Has Null Values: {column.hasNullValues ? "Yes" : "No"}</div>
            </div>
            {column.sampleValues.length > 0 && (
              <div className="mt-2">
                <div className="text-sm font-medium">Sample Values:</div>
                <div className="text-sm text-muted-foreground">
                  {column.sampleValues.slice(0, 5).join(", ")}
                  {column.sampleValues.length > 5 && "..."}
                </div>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
} 