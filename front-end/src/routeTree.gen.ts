/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TrucksRouteImport } from './routes/Trucks'
import { Route as JobsRouteImport } from './routes/Jobs'
import { Route as DriversRouteImport } from './routes/Drivers'
import { Route as IndexRouteImport } from './routes/index'
import { Route as JobsJobsIdRouteImport } from './routes/jobs/$jobsId'
import { Route as DriversDriverIdRouteImport } from './routes/drivers/$driverId'

const TrucksRoute = TrucksRouteImport.update({
  id: '/Trucks',
  path: '/Trucks',
  getParentRoute: () => rootRouteImport,
} as any)
const JobsRoute = JobsRouteImport.update({
  id: '/Jobs',
  path: '/Jobs',
  getParentRoute: () => rootRouteImport,
} as any)
const DriversRoute = DriversRouteImport.update({
  id: '/Drivers',
  path: '/Drivers',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const JobsJobsIdRoute = JobsJobsIdRouteImport.update({
  id: '/jobs/$jobsId',
  path: '/jobs/$jobsId',
  getParentRoute: () => rootRouteImport,
} as any)
const DriversDriverIdRoute = DriversDriverIdRouteImport.update({
  id: '/drivers/$driverId',
  path: '/drivers/$driverId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Drivers': typeof DriversRoute
  '/Jobs': typeof JobsRoute
  '/Trucks': typeof TrucksRoute
  '/drivers/$driverId': typeof DriversDriverIdRoute
  '/jobs/$jobsId': typeof JobsJobsIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Drivers': typeof DriversRoute
  '/Jobs': typeof JobsRoute
  '/Trucks': typeof TrucksRoute
  '/drivers/$driverId': typeof DriversDriverIdRoute
  '/jobs/$jobsId': typeof JobsJobsIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/Drivers': typeof DriversRoute
  '/Jobs': typeof JobsRoute
  '/Trucks': typeof TrucksRoute
  '/drivers/$driverId': typeof DriversDriverIdRoute
  '/jobs/$jobsId': typeof JobsJobsIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/Drivers'
    | '/Jobs'
    | '/Trucks'
    | '/drivers/$driverId'
    | '/jobs/$jobsId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/Drivers'
    | '/Jobs'
    | '/Trucks'
    | '/drivers/$driverId'
    | '/jobs/$jobsId'
  id:
    | '__root__'
    | '/'
    | '/Drivers'
    | '/Jobs'
    | '/Trucks'
    | '/drivers/$driverId'
    | '/jobs/$jobsId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DriversRoute: typeof DriversRoute
  JobsRoute: typeof JobsRoute
  TrucksRoute: typeof TrucksRoute
  DriversDriverIdRoute: typeof DriversDriverIdRoute
  JobsJobsIdRoute: typeof JobsJobsIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/Trucks': {
      id: '/Trucks'
      path: '/Trucks'
      fullPath: '/Trucks'
      preLoaderRoute: typeof TrucksRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Jobs': {
      id: '/Jobs'
      path: '/Jobs'
      fullPath: '/Jobs'
      preLoaderRoute: typeof JobsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Drivers': {
      id: '/Drivers'
      path: '/Drivers'
      fullPath: '/Drivers'
      preLoaderRoute: typeof DriversRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/jobs/$jobsId': {
      id: '/jobs/$jobsId'
      path: '/jobs/$jobsId'
      fullPath: '/jobs/$jobsId'
      preLoaderRoute: typeof JobsJobsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/drivers/$driverId': {
      id: '/drivers/$driverId'
      path: '/drivers/$driverId'
      fullPath: '/drivers/$driverId'
      preLoaderRoute: typeof DriversDriverIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DriversRoute: DriversRoute,
  JobsRoute: JobsRoute,
  TrucksRoute: TrucksRoute,
  DriversDriverIdRoute: DriversDriverIdRoute,
  JobsJobsIdRoute: JobsJobsIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
